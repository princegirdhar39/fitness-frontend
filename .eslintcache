[{"/home/prince/fitness-frontend/fitness-frontend/src/index.js":"1","/home/prince/fitness-frontend/fitness-frontend/src/reportWebVitals.js":"2","/home/prince/fitness-frontend/fitness-frontend/src/App.js":"3","/home/prince/fitness-frontend/fitness-frontend/src/fontawesome/index.js":"4","/home/prince/fitness-frontend/fitness-frontend/src/users_array/Users.js":"5","/home/prince/fitness-frontend/fitness-frontend/src/components/user-list-item.jsx":"6","/home/prince/fitness-frontend/fitness-frontend/src/components/search-user.jsx":"7","/home/prince/fitness-frontend/fitness-frontend/src/components/add-usermodel.jsx":"8","/home/prince/fitness-frontend/fitness-frontend/src/components/selected-users.jsx":"9","/home/prince/fitness-frontend/fitness-frontend/src/Dashboard.js":"10","/home/prince/fitness-frontend/fitness-frontend/src/components/Login/Login.js":"11"},{"size":543,"mtime":1609856009383,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1608035149911,"results":"14","hashOfConfig":"13"},{"size":690,"mtime":1609875080043,"results":"15","hashOfConfig":"13"},{"size":255,"mtime":1608457206774,"results":"16","hashOfConfig":"13"},{"size":7498,"mtime":1608562615370,"results":"17","hashOfConfig":"13"},{"size":594,"mtime":1608921716225,"results":"18","hashOfConfig":"13"},{"size":374,"mtime":1609861886062,"results":"19","hashOfConfig":"13"},{"size":1993,"mtime":1609882301631,"results":"20","hashOfConfig":"13"},{"size":783,"mtime":1610004792216,"results":"21","hashOfConfig":"13"},{"size":11101,"mtime":1610203772718,"results":"22","hashOfConfig":"13"},{"size":1648,"mtime":1609877605906,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ib6cyd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/prince/fitness-frontend/fitness-frontend/src/index.js",[],["51","52"],"/home/prince/fitness-frontend/fitness-frontend/src/reportWebVitals.js",[],"/home/prince/fitness-frontend/fitness-frontend/src/App.js",[],"/home/prince/fitness-frontend/fitness-frontend/src/fontawesome/index.js",[],["53","54"],"/home/prince/fitness-frontend/fitness-frontend/src/users_array/Users.js",["55","56","57"],"/home/prince/fitness-frontend/fitness-frontend/src/components/user-list-item.jsx",[],"/home/prince/fitness-frontend/fitness-frontend/src/components/search-user.jsx",["58"],"import { React } from \"react\";\nimport { FaSearch } from \"react-icons/fa\";\n\nexport const SearchUser = (props) => {\n  return (\n    <div>\n      {/* {<FaSearch/>} */}\n      <input\n        className=\"search\"\n        type=\"text\"\n        placeholder=\"Search\" \n        onChange={(e) => props.fsetSearch(e.target.value)}\n        \n        \n        \n      />\n      \n    </div>\n  );\n};\n","/home/prince/fitness-frontend/fitness-frontend/src/components/add-usermodel.jsx",["59","60","61"],"import  React  from \"react\";\nimport { Button, Header, Image, Modal,Form, TextArea } from \"semantic-ui-react\";\n\n\n\nexport const AddUser = (props) => {\n    return(\n        <Modal\n        onClose={() => props.setOpen(false)}\n        onOpen={() => props.setOpen(true)}\n        open={props.open}\n      >\n        <Modal.Header>Add a User</Modal.Header>\n        <Modal.Content image>\n          <Modal.Description>\n            <Form>\n              <Form.Field>\n                <label>First Name</label>\n                <input\n                  placeholder=\"First Name\"\n                  type=\"text\"\n                  name=\"name\"\n                  onChange={(e) => props.setFirstName(e.target.value)}\n                />\n              </Form.Field>\n              <Form.Field>\n                <label>Last Name</label>\n                <input\n                  placeholder=\"Last Name\"\n                  type=\"text\"\n                  name=\"name\"\n                  onChange={(e) => props.setLastName(e.target.value)}\n                />\n              </Form.Field>\n              <Form.Field>\n                <label>Email</label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Email\"\n                  onChange={(e) => props.setEmail(e.target.value)}\n                />\n              </Form.Field>\n            </Form>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button style={{width: 100}} color=\"black\" onClick={() => props.setOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n          style={{width: 100}}\n            content=\"Add\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            // onClick={() => setOpen(false)}\n            type=\"submit\"\n            className=\"blue\"\n            onClick={() => props.createNewUser(props.firstName, props.lastName, props.email)}\n            positive\n          />\n        </Modal.Actions>\n      </Modal>\n    );\n};","/home/prince/fitness-frontend/fitness-frontend/src/components/selected-users.jsx",[],"/home/prince/fitness-frontend/fitness-frontend/src/Dashboard.js",["62","63","64","65","66","67","68"],"import React, { Component, useState, useEffect } from \"react\";\nimport \"./fontawesome\";\nimport \"./App.css\";\nimport { UserListItem } from \"./components/user-list-item\";\nimport { SearchUser } from \"./components/search-user\";\nimport \"reactjs-popup/dist/index.css\";\nimport { faSleigh } from \"@fortawesome/free-solid-svg-icons\";\nimport { MdDone,MdNoteAdd,MdClear } from \"react-icons/md\";\n\nimport {\n  Button,\n  Header,\n  Image,\n  Modal,\n  Form,\n  TextArea,\n} from \"semantic-ui-react\";\nimport { AddUser } from \"./components/add-usermodel\";\nimport { SelectedUser } from \"./components/selected-users\";\nimport { FaPrescription } from \"react-icons/fa\";\n\nconst Dashboard = () => {\n  const [users, setUsers] = useState([]);\n  const [all_prescriptions, setPrescriptions] = useState([]);\n  const [all_conditions, setConditions] = useState([]);\n\n  const [search, setSearch] = useState(\"\");\n  const [filteredUsers, setFilteredUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [open, setOpen] = React.useState(false);\n\n  const [remainingPrescriptions, setRemainingPrescriptions] = useState([]);\n  const [remainingConditions, setReamainingConditions] = useState([]);\n\n  const userSelected = (user) => {\n    setSelectedUser(user);\n\n    setRemainingPrescriptions(\n      all_prescriptions.filter((pres) => {\n        return !user.prescriptions.some(\n          (user_pres) => user_pres.id === pres.id\n        );\n      })\n    );\n\n    setReamainingConditions(\n      all_conditions.filter((cond) => {\n        return !user.conditions.some((user_cond) => user_cond.id === cond.id);\n      })\n    );\n    \n  };\n\n  const addPrescriptionToUser = (prescription) => {\n    setRemainingPrescriptions(\n      remainingPrescriptions.filter((pres) => pres.id !== prescription.id)\n    );\n    setSelectedUser({\n      ...selectedUser,\n      prescriptions: [...selectedUser.prescriptions, prescription],\n    });\n    //add prescription\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: selectedUser.id,\n        prescriptionId: prescription.id\n        \n      }),\n    };\n    fetch(\"http://localhost:3000/users/assign-prescription\", requestOptions)\n      .then((response) => response.json())\n      .then((newPrescription) => {\n        //setOpen(false);\n        setPrescriptions([newPrescription, ...all_prescriptions]);\n      });\n  };\n  const removePrescription = (prescription) => {\n    setSelectedUser({\n      ...selectedUser,\n      prescriptions: selectedUser.prescriptions.filter(\n        (pres) => pres.id !== prescription.id\n      ),\n    });\n    setRemainingPrescriptions([...remainingPrescriptions, prescription]);\n\n  };\n\n  const addConditionToUser = (condition) => {\n    setReamainingConditions(\n      remainingConditions.filter((cond) => cond.id !== condition.id)\n    );\n    setSelectedUser({\n      ...selectedUser,\n      conditions: [...selectedUser.conditions, condition],\n    });\n    //addcondition\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: selectedUser.id,\n        conditionId: condition.id\n        \n      }),\n    };\n    fetch(\"http://localhost:3000/users/assign-condition\", requestOptions)\n      .then((response) => response.json())\n      .then((newCondition) => {\n        //setOpen(false);\n        setConditions([newCondition, ...all_conditions]);\n      });\n  };\n  const removeCondition = (condition) => {\n    setSelectedUser({\n      ...selectedUser,\n      conditions: selectedUser.conditions.filter(\n        (cond) => cond.id !== condition.id\n      ),\n    });\n    setReamainingConditions([...remainingConditions, condition]);\n  };\n\n  //get users request\n  useEffect(() => {\n    fetch(\"http://localhost:3000/users\")\n      .then((res) => res.json())\n      .then((data) => setUsers(data));\n  }, []);\n  //get prescriptions\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/prescriptions\")\n      .then((res) => res.json())\n      .then((data) => setPrescriptions(data));\n  }, []);\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/conditions\")\n      .then((res) => res.json())\n      .then((data) => setConditions(data));\n  }, []);\n\n  //search filter\n  useEffect(() => {\n    setFilteredUsers(\n      users.filter((user) => {\n        return (\n          user.first_name.toLowerCase().includes(search.toLowerCase()) ||\n          user.last_name.toLowerCase().includes(search.toLowerCase())\n        );\n      })\n    );\n  }, [search, users]);\n  //post request\n\n  const createNewUser = (firstName, lastName, email) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        P_fname: firstName,\n        P_lname: lastName,\n        P_email: email,\n      }),\n    };\n    fetch(\"http://localhost:3000/users\", requestOptions)\n      .then((response) => response.json())\n      .then((newUser) => {\n        setOpen(false);\n        setUsers([newUser, ...users]);\n      });\n  };\n\n  return (\n    <>\n      <AddUser\n        setFirstName={setFirstName}\n        setLastName={setLastName}\n        setEmail={setEmail}\n        setOpen={setOpen}\n        createNewUser={createNewUser}\n        firstName={firstName}\n        lastName={lastName}\n        email={email}\n        open={open}\n      />\n\n      <div className=\"container-1\">\n        <div className=\"container-2\">\n          <div className=\"container-4\">\n            <SearchUser fsetSearch={setSearch} />\n          </div>\n\n          <div className=\"user-list\">\n            {filteredUsers.map((user) => {\n              return (\n                <UserListItem\n                  key={user.id}\n                  setSelectedUser={userSelected}\n                  user={user}\n                />\n              );\n            })}\n          </div>\n          <div className=\"addUser\">\n            <Button color=\"blue\" onClick={() => setOpen(true)}>\n              Add User\n            </Button>\n          </div>\n        </div>\n        <div className=\"container-3\">\n          <SelectedUser selectedUser={selectedUser} />\n\n          <div className=\"container-7\">\n            {!selectedUser && (\n              <div className=\"lines\">\n              <div className=\"line\"></div>\n              <div className =\"line\"></div>\n              <div className=\"line\"></div>\n             \n            </div>\n            )} \n            {selectedUser && (\n              <div className=\"pres-cond\">\n                <div className=\"list-container\">\n                  <div className=\"title\">Prescriptions</div>\n                  <div className=\"list\">\n                    <div className=\"assigned-pres-cond\">\n                      <div className=\"assigned-title\">\n                        Assigned-prescriptions\n                      </div>\n                      {selectedUser.prescriptions.map((p) => (\n                        <div className=\"list-item\">\n                          {p.prescription}\n                          <MdClear style={{color:\"red\", cursor:\"pointer\", flex: 1,}} onClick={() => removePrescription(p)}/>\n                          {/* <Button onClick={() => removePrescription(p)}>\n                            Remove\n                          </Button> */}\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"remaining-pres-cond\">\n                      <div className=\"assigned-title\">\n                        <div>Select prescriptions</div>\n                      </div>\n                      {remainingPrescriptions.map((p) => (\n                        // <div className=\"pres-cond-list\">\n                        <div className=\"list-item\">\n                          {p.prescription}\n                          <MdDone style={{color:\"green\", cursor:\"pointer\" , flex: 1}} onClick={() => addPrescriptionToUser(p)}/>\n                          \n                        </div>\n                        // </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"list-container\">\n                  <div className=\"title\">Conditions</div>\n                  <div className=\"list\">\n                    <div className=\"assigned-pres-cond\">\n                      <div className=\"assigned-title\">\n                       \n                        Assigned-Conditions\n                      \n                      </div>\n                      {selectedUser.conditions.map((c) => (\n                        <div className=\"list-item\">\n                          {c.condition}\n                          <MdClear style={{color:\"red\", cursor:\"pointer\", flex: 1} } onClick={() => removeCondition(c)}/>\n                          \n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"remaining-pres-cond\">\n                      <div className=\"assigned-title\">Select Conditions</div>\n                      {remainingConditions.map((c) => (\n                        <div className=\"list-item\">\n                          {c.condition}\n                          <MdDone style={{color:\"green\", cursor:\"pointer\" , flex: 1}} onClick={() => addConditionToUser(c)} />\n                         \n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {selectedUser && (\n              <div className=\"notes\">\n                <Form>\n                  <TextArea\n                    value={selectedUser.note || \"\"}\n                    placeholder=\"Add a note\"\n                    onChange={(e) => {\n                      console.log(\"updating note\");\n                      userSelected({\n                        ...selectedUser,\n                        note: e.target.value,\n                      });\n                    }}\n                  />\n                </Form>\n                <Button\n                  onClick={() => {\n                    // API CALL\n                    const requestOptions = {\n                      method: \"PUT\",\n                      headers: { \"Content-Type\": \"application/json\" },\n                      body: JSON.stringify({\n                        userId: selectedUser.id,\n                        note: selectedUser.note,\n                      }),\n                    };\n                    fetch(\n                      \"http://localhost:3000/users/update-user-note\",\n                      requestOptions\n                    ).then((response) => response.json());\n\n                    // user_id: selectedUser.id,\n                    // note: selectedUser.note\n                  }}\n                  color=\"blue\"\n                >\n                  Update Note\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard\n","/home/prince/fitness-frontend/fitness-frontend/src/components/Login/Login.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"69","replacedBy":"73"},{"ruleId":"71","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":15},{"ruleId":"75","severity":1,"message":"79","line":3,"column":11,"nodeType":"77","messageId":"78","endLine":3,"endColumn":16},{"ruleId":"75","severity":1,"message":"80","line":305,"column":13,"nodeType":"77","messageId":"78","endLine":305,"endColumn":18},{"ruleId":"75","severity":1,"message":"81","line":2,"column":10,"nodeType":"77","messageId":"78","endLine":2,"endColumn":18},{"ruleId":"75","severity":1,"message":"82","line":2,"column":18,"nodeType":"77","messageId":"78","endLine":2,"endColumn":24},{"ruleId":"75","severity":1,"message":"83","line":2,"column":26,"nodeType":"77","messageId":"78","endLine":2,"endColumn":31},{"ruleId":"75","severity":1,"message":"84","line":2,"column":45,"nodeType":"77","messageId":"78","endLine":2,"endColumn":53},{"ruleId":"75","severity":1,"message":"85","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":26},{"ruleId":"75","severity":1,"message":"86","line":7,"column":10,"nodeType":"77","messageId":"78","endLine":7,"endColumn":18},{"ruleId":"75","severity":1,"message":"87","line":8,"column":17,"nodeType":"77","messageId":"78","endLine":8,"endColumn":26},{"ruleId":"75","severity":1,"message":"82","line":12,"column":3,"nodeType":"77","messageId":"78","endLine":12,"endColumn":9},{"ruleId":"75","severity":1,"message":"83","line":13,"column":3,"nodeType":"77","messageId":"78","endLine":13,"endColumn":8},{"ruleId":"75","severity":1,"message":"88","line":14,"column":3,"nodeType":"77","messageId":"78","endLine":14,"endColumn":8},{"ruleId":"75","severity":1,"message":"89","line":20,"column":10,"nodeType":"77","messageId":"78","endLine":20,"endColumn":24},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],["90"],["91"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'users' is assigned a value but never used.","'image' is assigned a value but never used.","'FaSearch' is defined but never used.","'Header' is defined but never used.","'Image' is defined but never used.","'TextArea' is defined but never used.","'Component' is defined but never used.","'faSleigh' is defined but never used.","'MdNoteAdd' is defined but never used.","'Modal' is defined but never used.","'FaPrescription' is defined but never used.","no-global-assign","no-unsafe-negation"]